<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="BaseTemplate.cs" Inherits="BaseTemplate"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Property Name="Namespace" Type="String" Category="配置" Description="命名空间" %>  
<%@ Property Name="TableName" Type="SchemaExplorer.TableSchema" Category="配置" DeepLoad="True" Optional="False" Description="表名"%>  
<%@ Property Name="DataModelNamespace" Type="String" Category="配置" Description="数据模型命名空间" Optional="False" %> 

using System;
using System.Collections.Generic;
using System.Linq;
using Dapper;
using <%=DataModelNamespace%>;
  
<%
     string primaryKeyParamName=GetPrimaryKeyName(TableName).Substring(0, 1).ToLower()+GetPrimaryKeyName(TableName).Substring(1);
     string primaryKeyParamType=CSharpType(TableName.PrimaryKey.MemberColumns[0]); 
     string lowerModelName=TableName.Name.Substring(0, 1).ToLower()+TableName.Name.Substring(1);
%>
namespace <%= Namespace %>
{
    public class <%=TableName.Name+"Data" %>
    {
        public void Insert<%=TableName.Name%>(<%=TableName.Name%> <%=lowerModelName%>)
        {
             <%
                string result;
            	result = "INSERT INTO " + TableName.Name + " (";
            	foreach(ColumnSchema column in TableName.Columns)
            	{
            		result += column.Name + ", ";
            	}
            	result = result.Substring(0, result.Length-2);
            	result += ") ";
    
            	result += " VALUES (";
            	foreach(ColumnSchema column in TableName.Columns)
            	{
            		result += "@" + column.Name + ", ";
            	}
            	result = result.Substring(0, result.Length-2);
            	result += ")";
                %>
             string sql="<%=result %>";
             using (var dbConnection = ConnectionFactory.CreateConnection())
             {
             	dbConnection.Open();
                dbConnection.Execute(sql, <%=lowerModelName%>);
             }
        }
    
        public void Delete<%=TableName.Name%>(<%=primaryKeyParamType%> <%=primaryKeyParamName%>)
        {
             string sql = "DELETE <%= TableName.Name %> WHERE <%= GetPrimaryKeyName(TableName) %> = @<%= primaryKeyParamName %>";
             using (var dbConnection = ConnectionFactory.CreateConnection())
             {
             	 dbConnection.Open();
                 dbConnection.Execute(sql, new {<%=primaryKeyParamName%>});
             }
        }
        
        public void Update<%=TableName.Name%>(<%=TableName.Name%> <%=lowerModelName%>)
        {
            string sql =
                "UPDATE <%=TableName.Name %> " +
                "SET "
			    +"<%= TableName.NonPrimaryKeyColumns[0].Name %> = @<%= TableName.NonPrimaryKeyColumns[0].Name %>" 
    			<%
    			for(int i=1; i<TableName.NonPrimaryKeyColumns.Count; i++)
    			{
    			ColumnSchema column = TableName.NonPrimaryKeyColumns[i];				
    			%>
                +", <%= column.Name %> = @<%= column.Name %>" 
			<%
			}
			%>
            +" WHERE <%= GetPrimaryKeyName(TableName) %> = @<%= GetPrimaryKeyName(TableName) %>";
            
            using (var dbConnection = ConnectionFactory.CreateConnection())
            {
            	dbConnection.Open();
                dbConnection.Execute(sql,<%=lowerModelName%>);
            }
            
        }
        
        public <%=TableName.Name%> Get<%=TableName.Name%>(<%=primaryKeyParamType%> <%=primaryKeyParamName%>)
        {
              const string sql = "SELECT * FROM <%= TableName.Name %> WHERE <%= GetPrimaryKeyName(TableName)%> = @<%= primaryKeyParamName %>";
              using (var dbConnection = ConnectionFactory.CreateConnection())
              {
              	  dbConnection.Open();
                  return dbConnection.Query<%="<"+TableName.Name+">"%>(sql,new {<%=primaryKeyParamName%>}).SingleOrDefault();
              }
        }
        
        
        public List<%="<"+TableName.Name+">" %> List<%=TableName.Name%>()
        {
              const string sql = "SELECT * FROM <%= TableName.Name %>";
              using (var dbConnection = ConnectionFactory.CreateConnection())
              {
              	  dbConnection.Open();
                  return dbConnection.Query<%="<"+TableName.Name+">"%>(sql).ToList();
              }
        }
        
        public List<%="<"+TableName.Name+">" %> List<%=TableName.Name%>(int pageIndex,int pageSize)
        {
              int startIndex=(pageIndex-1)*pageSize+1;
              int endIndex=pageIndex*pageSize;
        
              const string sql = "SELECT  * FROM ( "+
                                      "SELECT ROW_NUMBER() OVER(ORDER BY Id) AS row_number,* FROM dbo.Document "+  
                                  ") as Temp "+
                                  "WHERE Temp.row_number BETWEEN @startIndex AND @endIndex;";
                                  
              using (var dbConnection = ConnectionFactory.CreateConnection())
              {
              	  dbConnection.Open();
                  return dbConnection.Query<%="<"+TableName.Name+">"%>(sql,new {startIndex,endIndex}).ToList();
              }
        }
    }
}
<script runat="template">
    public override string GetFileName()
    {
    	return TableName.Name+ "Data.cs";
    }
</script>

